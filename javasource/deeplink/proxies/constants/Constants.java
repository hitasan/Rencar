// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package deeplink.proxies.constants;

import com.mendix.core.Core;

public class Constants
{
	/**
	 * @deprecated
	 * The default constructor of the Constants class should not be used.
	 * Use the static get methods instead.
	 */
	@java.lang.Deprecated(since = "9.12", forRemoval = true)
	public Constants() {}

	// These are the constants for the DeepLink module

	/**
	* Adds a leading '/' to the continuation parameter value.
	* MxSSO requires this constant to be set to 'false'.
	*/
	public static boolean getEnableLeadingSlash()
	{
		return (java.lang.Boolean)Core.getConfiguration().getConstantValue("DeepLink.EnableLeadingSlash");
	}

	/**
	* The index page that a user will be redirected to when the deeplink request handler finishes. This pages should start the client system, which will trigger the user's home microflow, which will execute the pending link that the handler prepared. You can (for example) modify this to have deeplinks use a different styling from the rest of the system by loading a different index page.
	* Default: index.html
	*/
	public static java.lang.String getIndexPage()
	{
		return (java.lang.String)Core.getConfiguration().getConstantValue("DeepLink.IndexPage");
	}

	/**
	* If login is required, this constant defines where to use can enter his credentials. If empty, the default location in the theme folder is used: login.html
	* 
	* The original deeplink location will be appended to the login location when the login location ends with a '='.
	* 
	* For example, in case of Mendix SSO:
	* 'https://login.mendix.com/oidp/login?ret='
	* 
	* Default: empty
	*/
	public static java.lang.String getLoginLocation()
	{
		return (java.lang.String)Core.getConfiguration().getConstantValue("DeepLink.LoginLocation");
	}

	/**
	* E.g RequesthandlerName 'link' will result in https://yourdomain.com/link/
	* 
	*/
	public static java.lang.String getRequestHandlerName()
	{
		return (java.lang.String)Core.getConfiguration().getConstantValue("DeepLink.RequestHandlerName");
	}

	/**
	* When a deeplink configuration allows anonymous users the SSO Handler will be requested before redirecting the user to its destination.
	* However, the SSO Handler will only be requested when the user session is an anonymous user session.
	* Useful in situations when SSO handler does not prompt users for authentication, allowing anonymous users.
	* 
	* The orginial deeplink location will be appended to the login location when the login location ends with a '='.
	* 
	* Example, in case of MendixSSO: '/openid/login?continuation='
	*/
	public static java.lang.String getSSOHandlerLocation()
	{
		return (java.lang.String)Core.getConfiguration().getConstantValue("DeepLink.SSOHandlerLocation");
	}
}