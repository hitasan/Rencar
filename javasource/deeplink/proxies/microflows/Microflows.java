// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package deeplink.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	/**
	 * @deprecated
	 * The default constructor of the Microflows class should not be used.
	 * Use the static microflow invocation methods instead.
	 */
	@java.lang.Deprecated(since = "9.12", forRemoval = true)
	public Microflows() {}

	// These are the microflows for the DeepLink module
	public static void aCT_AttributeSelect(IContext context, deeplink.proxies.Attribute _attribute, deeplink.proxies.DeepLink _deepLink)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Attribute", _attribute == null ? null : _attribute.getMendixObject());
		params.put("DeepLink", _deepLink == null ? null : _deepLink.getMendixObject());
		Core.microflowCall("DeepLink.ACT_AttributeSelect").withParams(params).execute(context);
	}
	public static void aCT_DeleteDeepLink(IContext context, deeplink.proxies.DeepLink _deepLinkURL)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("DeepLinkURL", _deepLinkURL == null ? null : _deepLinkURL.getMendixObject());
		Core.microflowCall("DeepLink.ACT_DeleteDeepLink").withParams(params).execute(context);
	}
	public static void aCT_EntitySelect(IContext context, deeplink.proxies.Entity _entity, deeplink.proxies.DeepLink _deepLink)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Entity", _entity == null ? null : _entity.getMendixObject());
		params.put("DeepLink", _deepLink == null ? null : _deepLink.getMendixObject());
		Core.microflowCall("DeepLink.ACT_EntitySelect").withParams(params).execute(context);
	}
	public static void aCT_MicroflowSelect(IContext context, deeplink.proxies.Microflow _microflow, deeplink.proxies.DeepLink _deepLink)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Microflow", _microflow == null ? null : _microflow.getMendixObject());
		params.put("DeepLink", _deepLink == null ? null : _deepLink.getMendixObject());
		Core.microflowCall("DeepLink.ACT_MicroflowSelect").withParams(params).execute(context);
	}
	public static void aCT_ShowMicroflowSelect(IContext context, deeplink.proxies.DeepLink _deepLink)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("DeepLink", _deepLink == null ? null : _deepLink.getMendixObject());
		Core.microflowCall("DeepLink.ACT_ShowMicroflowSelect").withParams(params).execute(context);
	}
	public static boolean bCo_Deeplink_SetAttributes(IContext context, deeplink.proxies.DeepLink _deepLink)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("DeepLink", _deepLink == null ? null : _deepLink.getMendixObject());
		return (java.lang.Boolean) Core.microflowCall("DeepLink.BCo_Deeplink_SetAttributes").withParams(params).execute(context);
	}
	public static void clearOldPendingLinks(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("DeepLink.ClearOldPendingLinks").withParams(params).execute(context);
	}
	public static void createDeeplinkConfig(IContext context, java.lang.String _name, java.lang.String _microflow, java.lang.String _objectType, java.lang.String _objectAttr, boolean _allowGuests, boolean _useStringArg, boolean _useAsHome, java.lang.String _indexPage, boolean _separateGetParams, boolean _objectAsParameter)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Name", _name);
		params.put("Microflow", _microflow);
		params.put("ObjectType", _objectType);
		params.put("ObjectAttr", _objectAttr);
		params.put("AllowGuests", _allowGuests);
		params.put("UseStringArg", _useStringArg);
		params.put("UseAsHome", _useAsHome);
		params.put("IndexPage", _indexPage);
		params.put("SeparateGetParams", _separateGetParams);
		params.put("ObjectAsParameter", _objectAsParameter);
		Core.microflowCall("DeepLink.CreateDeeplinkConfig").withParams(params).execute(context);
	}
	public static boolean deepLinkHome(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.Boolean) Core.microflowCall("DeepLink.DeepLinkHome").withParams(params).execute(context);
	}
	public static void dL_MultiStringValueExample(IContext context, java.lang.String _parameter_1, java.lang.String _parameter_2)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Parameter_1", _parameter_1);
		params.put("Parameter_2", _parameter_2);
		Core.microflowCall("DeepLink.DL_MultiStringValueExample").withParams(params).execute(context);
	}
	public static void dL_ObjectParameterExample(IContext context, system.proxies.Language _language)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Language", _language == null ? null : _language.getMendixObject());
		Core.microflowCall("DeepLink.DL_ObjectParameterExample").withParams(params).execute(context);
	}
	public static void dL_SingleStringParameterExample(IContext context, java.lang.String _urlPath)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("UrlPath", _urlPath);
		Core.microflowCall("DeepLink.DL_SingleStringParameterExample").withParams(params).execute(context);
	}
	public static java.util.List<deeplink.proxies.Attribute> dS_Attribute(IContext context, deeplink.proxies.DeepLink _deepLink)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("DeepLink", _deepLink == null ? null : _deepLink.getMendixObject());
		java.util.List<IMendixObject> objs = Core.microflowCall("DeepLink.DS_Attribute").withParams(params).execute(context);
		if (objs == null) {
			return null;
		} else {
			return objs.stream()
				.map(obj -> deeplink.proxies.Attribute.initialize(context, obj))
				.collect(java.util.stream.Collectors.toList());
		}
	}
	public static java.util.List<deeplink.proxies.KeyValue> dS_GetParametersFromMicroflow(IContext context, java.lang.String _microflow, java.lang.String _type)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Microflow", _microflow);
		params.put("Type", _type);
		java.util.List<IMendixObject> objs = Core.microflowCall("DeepLink.DS_GetParametersFromMicroflow").withParams(params).execute(context);
		if (objs == null) {
			return null;
		} else {
			return objs.stream()
				.map(obj -> deeplink.proxies.KeyValue.initialize(context, obj))
				.collect(java.util.stream.Collectors.toList());
		}
	}
	public static deeplink.proxies.Microflow dS_MicroflowByDeeplink(IContext context, deeplink.proxies.DeepLink _deepLink)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("DeepLink", _deepLink == null ? null : _deepLink.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("DeepLink.DS_MicroflowByDeeplink").withParams(params).execute(context);
		return result == null ? null : deeplink.proxies.Microflow.initialize(context, result);
	}
	public static java.lang.String getExampleObject(IContext context, deeplink.proxies.DeepLink _deepLink)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("DeepLink", _deepLink == null ? null : _deepLink.getMendixObject());
		return (java.lang.String) Core.microflowCall("DeepLink.GetExampleObject").withParams(params).execute(context);
	}
	public static java.lang.String getMicroflowInputParametersAsQueryString(IContext context, java.lang.String _microflow)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Microflow", _microflow);
		return (java.lang.String) Core.microflowCall("DeepLink.GetMicroflowInputParametersAsQueryString").withParams(params).execute(context);
	}
	public static java.util.List<deeplink.proxies.KeyValue> getParameters(IContext context, deeplink.proxies.DeepLink _deepLink)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("DeepLink", _deepLink == null ? null : _deepLink.getMendixObject());
		java.util.List<IMendixObject> objs = Core.microflowCall("DeepLink.GetParameters").withParams(params).execute(context);
		if (objs == null) {
			return null;
		} else {
			return objs.stream()
				.map(obj -> deeplink.proxies.KeyValue.initialize(context, obj))
				.collect(java.util.stream.Collectors.toList());
		}
	}
	public static void setupExampleDeeplinks(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("DeepLink.SetupExampleDeeplinks").withParams(params).execute(context);
	}
	public static boolean startDeeplink(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.Boolean) Core.microflowCall("DeepLink.StartDeeplink").withParams(params).execute(context);
	}
	public static java.lang.String sUB_GetApplicationURL(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.String) Core.microflowCall("DeepLink.SUB_GetApplicationURL").withParams(params).execute(context);
	}
	public static void sUB_ReloadMetaData(IContext context, deeplink.proxies.DeepLink _deepLink)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("DeepLink", _deepLink == null ? null : _deepLink.getMendixObject());
		Core.microflowCall("DeepLink.SUB_ReloadMetaData").withParams(params).execute(context);
	}
	public static void updateMicroflowMetaData(IContext context, deeplink.proxies.Microflow _newMicroflow, deeplink.proxies.DeepLink _deepLink)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("NewMicroflow", _newMicroflow == null ? null : _newMicroflow.getMendixObject());
		params.put("DeepLink", _deepLink == null ? null : _deepLink.getMendixObject());
		Core.microflowCall("DeepLink.UpdateMicroflowMetaData").withParams(params).execute(context);
	}
}
