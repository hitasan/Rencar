// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package rest.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	/**
	 * @deprecated
	 * The default constructor of the Microflows class should not be used.
	 * Use the static microflow invocation methods instead.
	 */
	@java.lang.Deprecated(since = "9.12", forRemoval = true)
	public Microflows() {}

	// These are the microflows for the REST module
	public static java.util.List<rest.proxies.City> city_REST_Get(IContext context, java.lang.Long _stateCode)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("StateCode", _stateCode);
		java.util.List<IMendixObject> objs = Core.microflowCall("REST.City_REST_Get").withParams(params).execute(context);
		if (objs == null) {
			return null;
		} else {
			return objs.stream()
				.map(obj -> rest.proxies.City.initialize(context, obj))
				.collect(java.util.stream.Collectors.toList());
		}
	}
	public static system.proxies.HttpResponse getContract(IContext context, system.proxies.HttpRequest _httpRequest, java.lang.Long _count, java.lang.Long _offSet)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("httpRequest", _httpRequest == null ? null : _httpRequest.getMendixObject());
		params.put("Count", _count);
		params.put("OffSet", _offSet);
		IMendixObject result = (IMendixObject)Core.microflowCall("REST.GetContract").withParams(params).execute(context);
		return result == null ? null : system.proxies.HttpResponse.initialize(context, result);
	}
	public static rest.proxies.Xmlcep postalCode_REST_Get(IContext context, java.lang.String _postalCode)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("PostalCode", _postalCode);
		IMendixObject result = (IMendixObject)Core.microflowCall("REST.PostalCode_REST_Get").withParams(params).execute(context);
		return result == null ? null : rest.proxies.Xmlcep.initialize(context, result);
	}
	public static system.proxies.HttpResponse postVehicle(IContext context, system.proxies.HttpRequest _httpRequest)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("httpRequest", _httpRequest == null ? null : _httpRequest.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("REST.PostVehicle").withParams(params).execute(context);
		return result == null ? null : system.proxies.HttpResponse.initialize(context, result);
	}
	public static java.util.List<rest.proxies.State> state_REST_Get(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		java.util.List<IMendixObject> objs = Core.microflowCall("REST.State_REST_Get").withParams(params).execute(context);
		if (objs == null) {
			return null;
		} else {
			return objs.stream()
				.map(obj -> rest.proxies.State.initialize(context, obj))
				.collect(java.util.stream.Collectors.toList());
		}
	}
	public static java.lang.String vehicle_REST_Post(IContext context, masterdata.proxies.Vehicle _vehicle)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Vehicle", _vehicle == null ? null : _vehicle.getMendixObject());
		return (java.lang.String) Core.microflowCall("REST.Vehicle_REST_Post").withParams(params).execute(context);
	}
}
